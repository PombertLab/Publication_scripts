#!/usr/bin/perl
## Pombert Lab, Illinois Tech, 2022
my $name = 'get_decoy_pdbs.pl';
my $version = '0.2';
my $updated = '2022-06-03';

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use File::Basename;
use File::Path qw(make_path);
use Cwd qw(abs_path);

my $usage = <<"USAGE";
NAME		${name}
VERSION		${version}
UPDATED		${updated}
SYNOPSIS	Generates PDB files from the top X docking scores for putative 
		matches identified with get_ppiscores.pl

REQUIREMENTS	- decoygen from Megadock

EXAMPLE		${name} \\
		  -l ppiscores.tsv \\
		  -t 100 \\
		  -m 10 \\
		  -n 5 \\
		  -d MDOCK \\
		  -o PDBs

GENERAL OPTIONS:
-l (--list)	Tab-delimited list generated by get_ppiscores.pl
-m (--minppi)	Minimum PPIscore to keep [Default: 10]
-t (--topmatch)	Maximum number of matches to keep [Default: 100]
-n (--number)	Number of PDBs to generate from top decoys [Default: 5]
-c (--concat)	Concatenate all decoys into one PDB file
-d (--datadir)	Directory containing results from run_megadock.pl
-o (--outdir)	Output directory
USAGE
die "\n$usage\n" unless @ARGV;

my $ppiscores;
my $minppi = 10;
my $top_matches = 100;
my $num_decoys = 5;
my $datadir;
my $outdir;
my $concatenate;

GetOptions(
	'l|list=s' => \$ppiscores,
	'm|minppi=f' => \$minppi,
	't|topmatch=i' => \$top_matches,
	'n|number=i' => \$num_decoys,
	'd|datadir=s' => \$datadir,
	'o|outdir=s' => \$outdir,
	'c|concat' => \$concatenate
);


### Check if output directory / subdirs can be created
$outdir = abs_path($outdir);
$outdir =~ s/\/$//;
unless (-d $outdir) {
	make_path( $outdir, { mode => 0755 } )  or die "Can't create $outdir: $!\n";
}

### Data directories
$datadir = abs_path($datadir);
$datadir =~ s/\/$//;
my $dockdir = "$datadir/DOCKING";
my $ligdir = "$datadir/LIGANDS";
my $recdir = "$datadir/RECEPTORS";

### Working on TSV file
open TSV, "<", $ppiscores or die "Can't read $ppiscores: $!\n";

my %receptors;
my $ppi_rank;

print "\n### Generating PDB files with decoys\n";

while (my $line = <TSV>){

	chomp $line;

	if ($line =~ /^#/){
		next;
	}
	else {
		## Grabbing the tab-delimited data with split
		my @data = split("\t", $line);
		my $receptor = $data[0];
		my $ligand = $data[1];
		my $ppiscore = $data[2];

		$ppi_rank += 1;
		my $num_len = length $top_matches;
		my $decoy_len = length $num_decoys;

		unless (exists $receptors{$receptor}){
			print "  Working on receptor: $receptor\n";
		}

		$receptors{$receptor} += 1;
		my $rec_subdir = "$outdir/$receptor";

		## Check if number of top matches has been reached
		if ($receptors{$receptor} <= $top_matches){

			## Check if score > min PPI score
			if ($ppiscore >= $minppi){
			
				unless (-e $rec_subdir){
					mkdir ($rec_subdir, 0755) or die "Can't create $outdir: $!\n";
				}

				## Generate pdb files for the top X decoys

				my $decoypdb;
				my $tmpfile;

				$ppi_rank = sprintf("%0${num_len}d", $ppi_rank);

				for my $decoy_rank (1..$num_decoys){

					$tmpfile = "$rec_subdir/temp-$decoy_rank.pdb";
					$decoy_rank = sprintf("%0${decoy_len}d", $decoy_rank);
					
					$decoypdb = "$rec_subdir/$ppi_rank-$receptor.vs.$ligand-d$decoy_rank.pdb";

					## Skip if file exists (save on computation time)
					if (-e $decoypdb){ next; }
					else {
						# Create ligand from decoy
						system ("decoygen $tmpfile \\
							$ligdir/$ligand.pdb \\
							$dockdir/$receptor/$receptor.vs.$ligand.out \\
							$decoy_rank
						") == 0 or checksig();

						unless ($concatenate){
							# create receptor + ligand PDB 
							system ("cat $recdir/$receptor.pdb $tmpfile > $decoypdb
							") == 0 or checksig();
						}
					}

				}

				## Create a single concatenated file with all decoys
				if ($concatenate){

					$decoypdb = "$rec_subdir/$ppi_rank-$receptor.vs.$ligand-concat.pdb";

					## Skip if file exists (save on computation time)
					if (-e $decoypdb){ next; }
					else {
						my $string_of_decoys;
						for my $decoy_rank (1..$num_decoys){
							$tmpfile = "$rec_subdir/temp-$decoy_rank.pdb";
							$string_of_decoys .= "$tmpfile ";
						}
						system ("cat $recdir/$receptor.pdb $string_of_decoys > $decoypdb
						") == 0 or checksig();
					}
				}

				## Removing temp file(s), if any
				if (-e $decoypdb){ next; }
				else {
					for my $decoy_rank (1..$num_decoys){
						$tmpfile = "$rec_subdir/temp-$decoy_rank.pdb";
						system ("rm $tmpfile") == 0 or checksig();
					}
				}

			}
		}

	}

}



########################################################################################
## Subroutine(s)
sub checksig {

	my $exit_code = $?;
	my $modulo = $exit_code % 255;

	if ($modulo == 2) {
		print "\nSIGINT detected: Ctrl+C => exiting...\n\n";
		exit(2);
	}
	elsif ($modulo == 131) {
		print "\nSIGTERM detected: Ctrl+\\ => exiting...\n\n";
		exit(131);
	}

}

